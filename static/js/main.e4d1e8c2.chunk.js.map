{"version":3,"sources":["assets/DURLogo.png","components/Minter.js","index.js"],"names":["initialInfoState","connected","status","account","web3","contract","address","contractJSON","initialMintState","loading","name","amount","supply","cost","Minter","useState","info","setInfo","mintInfo","setMintInfo","console","log","init","_request","_contractJSON","a","window","ethereum","isMetaMask","request","method","accounts","chain_id","Web3","prevState","eth","Contract","abi","chain","message","getSupply","params","to","from","data","methods","totalSupply","encodeABI","result","utils","hexToNumberString","getCost","mint","value","String","toHex","Number","connectToContract","useEffect","on","location","reload","className","alt","src","Hero","width","height","total_supply","style","display","justifyContent","alignItems","disabled","onClick","color","textAlign","fromWei","chain_symbol","backgroundColor","substring","position","bottom","left","target","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e4d1e8c2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/DURLogo.4a526b4b.png\";","import { useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport contract from \"../contracts/contract.json\";\nimport Hero from \"../assets/DURLogo.png\";\n\nconst initialInfoState = {\n  connected: false,\n  status: null,\n  account: null,\n  web3: null,\n  contract: null,\n  address: null,\n  contractJSON: null,\n};\n\nconst initialMintState = {\n  loading: false,\n  status: `Mint your ${contract.name}`,\n  amount: 1,\n  supply: \"0\",\n  cost: \"0\",\n};\n\nfunction Minter() {\n  const [info, setInfo] = useState(initialInfoState);\n  const [mintInfo, setMintInfo] = useState(initialMintState);\n\n  console.log(info);\n\n  const init = async (_request, _contractJSON) => {\n    if (window.ethereum.isMetaMask) {\n      try {\n        const accounts = await window.ethereum.request({\n          method: _request,\n        });\n        const networkId = await window.ethereum.request({\n          method: \"net_version\",\n        });\n        if (networkId == _contractJSON.chain_id) {\n          let web3 = new Web3(window.ethereum);\n          setInfo((prevState) => ({\n            ...prevState,\n            connected: true,\n            status: null,\n            account: accounts[0],\n            web3: web3,\n            contract: new web3.eth.Contract(\n              _contractJSON.abi,\n              _contractJSON.address\n            ),\n            contractJSON: _contractJSON,\n          }));\n        } else {\n          setInfo(() => ({\n            ...initialInfoState,\n            status: `Change network to ${_contractJSON.chain}.`,\n          }));\n        }\n      } catch (err) {\n        console.log(err.message);\n        setInfo(() => ({\n          ...initialInfoState,\n        }));\n      }\n    } else {\n      setInfo(() => ({\n        ...initialInfoState,\n        status: \"Please install metamask.\",\n      }));\n    }\n  };\n\n  const initListeners = () => {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", () => {\n        window.location.reload();\n      });\n      window.ethereum.on(\"chainChanged\", () => {\n        window.location.reload();\n      });\n    }\n  };\n\n  const getSupply = async () => {\n    const params = {\n      to: info.contractJSON.address,\n      from: info.account,\n      data: info.contract.methods.totalSupply().encodeABI(),\n    };\n    try {\n      const result = await window.ethereum.request({\n        method: \"eth_call\",\n        params: [params],\n      });\n      console.log(info.web3.utils.hexToNumberString(result));\n      setMintInfo((prevState) => ({\n        ...prevState,\n        supply: info.web3.utils.hexToNumberString(result),\n      }));\n    } catch (err) {\n      setMintInfo((prevState) => ({\n        ...prevState,\n        supply: 0,\n      }));\n    }\n  };\n\n  const getCost = async () => {\n    const params = {\n      to: info.contractJSON.address,\n      from: info.account,\n      data: info.contract.methods.cost().encodeABI(),\n    };\n    try {\n      const result = await window.ethereum.request({\n        method: \"eth_call\",\n        params: [params],\n      });\n      console.log(info.web3.utils.hexToNumberString(result));\n      setMintInfo((prevState) => ({\n        ...prevState,\n        cost: info.web3.utils.hexToNumberString(result),\n      }));\n    } catch (err) {\n      setMintInfo((prevState) => ({\n        ...prevState,\n        cost: \"0\",\n      }));\n    }\n  };\n\n  const mint = async () => {\n    const params = {\n      to: info.contractJSON.address,\n      from: info.account,\n      value: String(\n        info.web3.utils.toHex(Number(mintInfo.cost) * mintInfo.amount)\n      ),\n      data: info.contract.methods\n        .mint(info.account, mintInfo.amount)\n        .encodeABI(),\n    };\n    try {\n      setMintInfo((prevState) => ({\n        ...prevState,\n        loading: true,\n        status: `Minting ${mintInfo.amount}...`,\n      }));\n      const txHash = await window.ethereum.request({\n        method: \"eth_sendTransaction\",\n        params: [params],\n      });\n      setMintInfo((prevState) => ({\n        ...prevState,\n        loading: false,\n        status:\n          \"Your NFT will show up on Opensea, once the transaction is successful.\",\n      }));\n      getSupply();\n    } catch (err) {\n      setMintInfo((prevState) => ({\n        ...prevState,\n        loading: false,\n        status: err.message,\n      }));\n    }\n  };\n\n  const updateAmount = (newAmount) => {\n    if (newAmount <= 5 && newAmount >= 1) {\n      setMintInfo((prevState) => ({\n        ...prevState,\n        amount: newAmount,\n      }));\n    }\n  };\n\n  const connectToContract = (_contractJSON) => {\n    init(\"eth_requestAccounts\", _contractJSON);\n  };\n\n  useEffect(() => {\n    connectToContract(contract);\n    initListeners();\n  }, []);\n\n  useEffect(() => {\n    if (info.connected) {\n      getSupply();\n      getCost();\n    }\n  }, [info.connected]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"card\">\n        <div className=\"card_header colorGradient\">\n          <img className=\"card_header_image ns\" alt={\"banner\"} src={Hero} width=\"300\" height=\"300\"/>\n        </div>\n        {mintInfo.supply < contract.total_supply ? (\n          <div className=\"card_body\">\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n              }}\n            >\n              <div style={{ width: 10 }}></div>\n              <button\n                disabled={!info.connected || mintInfo.cost == \"0\"}\n                className=\"big_button\"\n                onClick={() => mint()}\n              >\n                Mint\n              </button>\n              <div style={{ width: 10 }}></div>\n            </div>\n            {info.connected ? (\n              <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n                <p style={{ color: \"var(--statusText)\", textAlign: \"center\" }}>\n                  {info.web3?.utils.fromWei(mintInfo.cost, \"ether\") *\n                    mintInfo.amount}{\" \"}\n                  {contract.chain_symbol}\n                </p>\n                <div style={{ width: 20 }}></div>\n                <p style={{ color: \"var(--statusText)\", textAlign: \"center\" }}>\n                  |\n                </p>\n                <div style={{ width: 20 }}></div>\n                <p style={{ color: \"var(--statusText)\", textAlign: \"center\" }}>\n                  {mintInfo.supply}/{contract.total_supply}\n                </p>\n              </div>\n            ) : null}\n            {mintInfo.status ? (\n              <p className=\"statusText\">{mintInfo.status}</p>\n            ) : null}\n            {info.status ? (\n              <p className=\"statusText\" style={{ color: \"var(--error)\" }}>\n                {info.status}\n              </p>\n            ) : null}\n          </div>\n        ) : (\n          <div className=\"card_body\">\n            <p style={{ color: \"var(--statusText)\", textAlign: \"center\" }}>\n              {mintInfo.supply}/{contract.total_supply}\n            </p>\n            <p className=\"statusText\">\n              We've sold out! .You can still buy and trade {contract.name}{\" \"}\n              on Opensea.\n            </p>\n          </div>\n        )}\n        <div className=\"card_footer colorGradient\">\n          <button\n            className=\"button\"\n            style={{\n              backgroundColor: info.connected\n                ? \"var(--success)\"\n                : \"var(--warning)\",\n            }}\n            onClick={() => connectToContract(contract)}\n          >\n            {info.account ? \"Connected\" : \"Connect Wallet\"}\n          </button>\n          {info.connected ? (\n            <span className=\"accountText\">\n              {String(info.account).substring(0, 6) +\n                \"...\" +\n                String(info.account).substring(38)}\n            </span>\n          ) : null}\n        </div>\n        <a\n          style={{\n            position: \"absolute\",\n            bottom: 55,\n            left: -75,\n          }}\n          className=\"_90\"\n          target=\"_blank\"\n          href=\"https://polygonscan.com/token/0x2862490c8caf2aa3a259cde41a17cb679d6d1986\"\n        >\n          View Contract\n        </a>\n      </div>\n    </div>\n  );\n}\n\nexport default Minter;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Minter from \"./components/Minter\";\nimport \"./styles/styles.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Minter />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}